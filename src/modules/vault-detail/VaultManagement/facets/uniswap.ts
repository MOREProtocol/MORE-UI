import { availableTokensDropdownOptions, deadlineDropdownOptions } from './constants';
import { DisplayType, Facet, InputType } from './types';

export const uniswapFacet: Facet = {
  contractAddress: {
    testnet: '0x31aC13517Ad9c55d8337dBeC2e352632f080bC8b',
  },
  name: 'Uniswap v2',
  icon: '/icons/protocols/uniswap.svg',
  description: 'Uniswap is a decentralized exchange for trading cryptocurrencies.',
  actions: [
    {
      id: 'addLiquidity',
      name: 'Add Liquidity',
      actionButtonText: 'Add Liquidity',
      description: 'Add liquidity to a pool',
      abi: `function addLiquidity(
        address router,
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
      ) external returns (uint amountA, uint amountB, uint liquidity);`,
      inputs: [
        {
          id: 'router',
          name: 'Router',
          description: 'The router address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: {
            // PunchSwapV2Router
            testnet: '0xeD53235cC3E9d2d464E9c408B95948836648870B',
            mainnet: '0xf45AFe28fd5519d5f8C1d4787a4D5f724C0eFa4d',
          },
        },
        {
          id: 'tokenA',
          name: 'Token A',
          description: 'The token A address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: availableTokensDropdownOptions,
        },
        {
          id: 'tokenB',
          name: 'Token B',
          description: 'The token B address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: availableTokensDropdownOptions,
        },
        {
          id: 'amountADesired',
          name: 'Amount A Desired',
          description: 'The amount of token A desired',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
          relatedInputId: 'tokenA',
        },
        {
          id: 'amountBDesired',
          name: 'Amount B Desired',
          description: 'The amount of token B desired',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
          relatedInputId: 'tokenB',
        },
        {
          id: 'to',
          name: 'To',
          description: 'The address to send the tokens to',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: '',
        },
        {
          id: 'deadline',
          name: 'Deadline',
          description: 'The deadline of the transaction',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: deadlineDropdownOptions,
          defaultValue: deadlineDropdownOptions[2].value,
        },
      ],
    },
    {
      id: 'removeLiquidity',
      name: 'Remove Liquidity',
      actionButtonText: 'Remove Liquidity',
      description: 'Remove liquidity from a pool',
      abi: `function removeLiquidity(
        address router,
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
      ) external returns (uint amountA, uint amountB);`,
      inputs: [
        {
          id: 'router',
          name: 'Router',
          description: 'The router address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: {
            // PunchSwapV2Router
            testnet: '0xeD53235cC3E9d2d464E9c408B95948836648870B',
            mainnet: '0xf45AFe28fd5519d5f8C1d4787a4D5f724C0eFa4d',
          },
        },
        {
          id: 'tokenA',
          name: 'Token A',
          description: 'The token A address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: availableTokensDropdownOptions,
        },
        {
          id: 'tokenB',
          name: 'Token B',
          description: 'The token B address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: availableTokensDropdownOptions,
        },
        {
          id: 'liquidity',
          name: 'Liquidity',
          description: 'The liquidity to remove',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
        },
        {
          id: 'amountAMin',
          name: 'Amount A Min',
          description: 'The minimum amount of token A desired',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
          relatedInputId: 'tokenA',
        },
        {
          id: 'amountBMin',
          name: 'Amount B Min',
          description: 'The minimum amount of token B desired',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
          relatedInputId: 'tokenB',
        },
        {
          id: 'to',
          name: 'To',
          description: 'The address to send the tokens to',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: '',
        },
        {
          id: 'deadline',
          name: 'Deadline',
          description: 'The deadline of the transaction',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: deadlineDropdownOptions,
          defaultValue: deadlineDropdownOptions[2].value,
        },
      ],
    },
    {
      id: 'swapExactTokensForTokens',
      name: 'Swap Exact Tokens For Tokens',
      actionButtonText: 'Swap',
      description: 'Swap exact tokens for tokens using a call data path',
      abi: `function swapExactTokensForTokens(
        address router,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
      ) external returns (uint[] memory amounts);`,
      inputs: [
        {
          id: 'router',
          name: 'Router',
          description: 'The router address',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: {
            // PunchSwapV2Router
            testnet: '0xeD53235cC3E9d2d464E9c408B95948836648870B',
            mainnet: '0xf45AFe28fd5519d5f8C1d4787a4D5f724C0eFa4d',
          },        },
        {
          id: 'amountIn',
          name: 'Amount In',
          description: 'The amount of tokens to swap',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
        },
        {
          id: 'amountOutMin',
          name: 'Amount Out Min',
          description: 'The minimum amount of tokens to receive',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.CURRENCY_AMOUNT_INPUT,
        },
        {
          id: 'path',
          name: 'Path',
          description: 'The path of the tokens to swap',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT, // TODO: change to array?
        },
        {
          id: 'to',
          name: 'To',
          description: 'The address to send the tokens to',
          type: InputType.ADDRESS,
          isShown: true,
          displayType: DisplayType.ADDRESS_INPUT,
          defaultValue: '',
        },
        {
          id: 'deadline',
          name: 'Deadline',
          description: 'The deadline of the transaction',
          type: InputType.UINT,
          isShown: true,
          displayType: DisplayType.DROPDOWN,
          dropdownOptions: deadlineDropdownOptions,
          defaultValue: deadlineDropdownOptions[2].value,
        },
      ],
    },
  ],
};
